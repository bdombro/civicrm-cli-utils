#!/usr/bin/php
<?php

require __DIR__ . '/vendor/autoload.php';

$CONF_CIVICRM_ROOT='/var/www/ncba/ncba/sites/all/modules/civicrm';

$args = new \cli\Arguments();

$args->addOption(array('civi-root', 'r'), array(
  'default' => $CONF_CIVICRM_ROOT,
  'description' => 'Path to CiviCRM',
  ));

$args->addOption(array('input-file', 'f'), array(
  'default' => STDIN,
  'description' => 'File to act on. Alternate to pipe to STDIN',
));

$args->addOption(array('id-col', 'i'), array(
  'default' => 'Internal Contact ID',
  'description' => 'CiviCRM Contact ID Column',
));

$msg = <<<USAGE
Show this help screen

Example
  ./clean --input-file my.csv --civi-root /var/www/sites/all/modules/civicrm --id-col 'Internal Contact ID;

USAGE;

$args->addFlag(array('help', 'h', 'usage', 'u'), $msg);
$args->parse();
if ($args['help']) {
	die($args->getHelpScreen()."\n");
}

/**
 * END CONFIG
 */

define('CIVICRM_ROOT', getOption('civi-root', $args));
validateApiConfig();

define('ID_COLUMN', getOption('id-col', $args));

$input = getOption('input-file', $args);

$jobDate = shell('date +"%F %R"');
$apiTag = createJobTag($jobDate, 'Delete CiviCRM Contacts');

define('TAG_ID', $apiTag->id);

$main = 'processContacts';
withFile($input, $main);

/**
 * TODO:
 * @param type $cont
 */
function processContact($cont) {
 echo 'processContact'."\n";
 tagContact($cont[ID_COLUMN], TAG_ID);
 markContactDeleted($cont);
}

/**
 * TODO:
 * @param type $cont
 */
function markContactDeleted($cont) {
  echo 'markContactDeleted'
    . $cont[ID_COLUMN]
    . "\n";
}

$fieldDefinition = array();
/**
 * Called in the loop, so must use global variable;
 *
 * @global array $fieldDefinition
 * @param type $line
 * @param type $index
 */
function processContacts($line, $index) {
  global $fieldDefinition;

  processContact(parseCSV($line, $index, $fieldDefinition));
}

/**
 * Tag CiviCRM Contact
 *
 * @param type $cont_id
 * @param type $tag_id
 * @return type
 */
function tagContact($cont_id, $tag_id) {
  return cvApi("entity_tag.create contact_id=$cont_id tag_id=$tag_id");
}

/**
 * Create a "Job" Tag based on a date and script verb.
 *
 * @param type $date_str
 * @param type $job_action
 * @return type
 */
function createJobTag($date_str, $job_action) {
  $apiCall = <<<JOBTAG
tag.create name="$date_str" description="Bulk Script $job_action Contacts $date_str"
JOBTAG
    ;
  $apiResult = cvApi($apiCall);
  $values = get_object_vars($apiResult->values);
  foreach($values as $tag) {
    cli\out("Created tag: {$tag->name} \n");
  }
  return $apiResult;
}

/**
 * diagnostic function
 *
 * @param type $line
 * @param type $index
 */
function echoLine($line, $index) {
  echo $index . ':' . $line . "\n";
}

/**
 * Utility to get user option or it's default.
 *
 * @param string $opt option name
 * @param array $args cli\Arguments object
 * @return mixed
 */
function getOption($opt, $args) {
  $user = $args->getArguments();
  if ($args[$opt]) {
    $val = $user[$opt];
  } else {
    $arg = $args->getOption($opt);
    $val = ( key_exists('default', $arg) ) ? $arg['default'] : null;
  }
  return $val;
}

/**
 * Loop Callback utility to create an array from a csv file.
 * Associative array if $index and $fieldDefinition are provided.
 *
 * @param string $line
 * @param int $index
 * @param array $fieldDefinition keys
 * @return array
 */
function parseCsv($line, $index=NULL, &$fieldDefinition=NULL) {
  $values = str_getcsv($line, ',', '"');
  if ($index === 0) {
    $fieldDefinition = $values;
  } else if ($fieldDefinition) {
    if (count($fieldDefinition) == count($values)) {
      return array_combine($fieldDefinition, $values);
    } else {
      cli\err("field definition did not match:\n". var_export($values, TRUE));
    }
  } else {
    return $values;
  }
}

/**
 * Execute drush cvapi
 * confirm CiviCRM Root
 *
 * @param $apiCall e.g. ext.install key='org.civicrm.volunteer'
 * @param $toStdOut FALSE
 * @return PHP Object from CiviCRM API result
 **/
function cvApi($apiCall, $toStdOut=FALSE) {
  $CVAPI = 'drush cvapi';

  if (!is_dir(CIVICRM_ROOT)) {
    throw new Exception('CIVICRM_ROOT is undefined');
  }

  $cacheDir = getcwd();
  chdir(CIVICRM_ROOT);

  $output = $return_var = null;
  if ($toStdOut) {
    system("$CVAPI $apiCall --out=pretty", $return_var);
    chdir($cacheDir);
    return $return_var;
  } else {
    exec("$CVAPI $apiCall --out=json", $output, $return_var);
    chdir($cacheDir);
    return json_decode(join($output));
  }
}

function validateApiConfig() {
  $apiResult = cvApi('domain.get');

  if (!$apiResult || $apiResult->is_error == 1) {
    echo "FAILED to validate API connection\n";
    if ($apiResult->is_error) {
      echo $apiResult->error_message;
    }
    die("\nexit");
  }
}

/**
 * Callback per input line.
 *
 * @param file $file string or resource
 * @param string $function_name e.g. - myCallback($line, $index) {...}
 * @param array $dontMask Optional. Remove items from character_mask argument to trim() - e.g. array("\n", "\t"); Note double-quotes.
 * @throws Exception
 **/
function withFile($file, $function_name, $dontMask = array()) {

  if ( !is_resource($file)) {
    //try to open it
    $file = fopen($file, 'r');
  } else if (get_resource_type($file) !== "stream") {
    throw new Exception("Resources is not a file.");
  }

  if ( !function_exists($function_name)) {
    throw new Exception("function name, \"$function_name\" does not exist;");
  }

  $dontMask = array_fill_keys($dontMask, '');
  $charmask = strtr(" \t\n\r\0\x0B", $dontMask);

  $n=0;
  while (($line = fgets($file)) !== FALSE) {
    $function_name(trim($line, $charmask), $n);
    $n++;
  }

  $meta = stream_get_meta_data($file);
  if (!$meta['uri'] != 'php://stdin') {
    fclose($file);
  }
}

/**
 * Wrap php exec function with some helpers.
 * Returns output of command.
 *
 * @param type $call system call
 * @param string $chDir execute command in this dir
 * @return string
 */
function shell($call, $chDir=NULL) {
  if ($chDir) {
    $cacheDir = getcwd();
    chdir(CIVICRM_ROOT);
  }
  exec($call, $output, $return_var);

  if ($chDir) {
    chdir($cacheDir);
  }

  return join($output);
}